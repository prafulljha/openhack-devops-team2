variables:
- name: BuildParameters.RestoreBuildProjects
  value: apis/poi/web/poi.csproj
- name: BuildParameters.TestProjects
  value: apis/poi/tests/UnitTests/UnitTests.csproj
pr:
  branches:
    include:
    - master
  paths:
    include:
    - apis/poi
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - apis/poi
name: $(date:yyyyMMdd)$(rev:.r)
resources:
  repositories:
  - repository: self
    type: git
    ref: master
jobs:
- job: Job_1
  displayName: Agent job 1
  pool:
    vmImage: ubuntu-16.04
  steps:
  - checkout: self
  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: $(BuildParameters.RestoreBuildProjects)
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: $(BuildParameters.RestoreBuildProjects)
      arguments: --configuration $(BuildConfiguration)
  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      projects: $(BuildParameters.TestProjects)
      arguments: --configuration $(BuildConfiguration)
  - task: Docker@2
    displayName: Build an image
    inputs:
      repository: devopsoh/api-poi
      containerRegistry: 'AZCR connection1'
      tags: '$(Build.BuildId)'
      command: build
      Dockerfile: apis/poi/web/Dockerfile
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact
    condition: succeededOrFailed()
    enabled: False
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'
- job: createworkitem
  displayName: Create work item on failure
  dependsOn: Job_1
  condition: failed() # this job will only run if Job_1 fails
  steps:
    - task: CreateWorkItem@1
      displayName: Create work item on failure
      inputs:
        workItemType: 'Issue'
        title: 'Build $(Build.BuildId) failed'
...
